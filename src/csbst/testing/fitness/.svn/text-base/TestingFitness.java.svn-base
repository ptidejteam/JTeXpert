package csbst.testing.fitness;

import java.lang.reflect.InvocationTargetException;

import csbst.ga.GeneActive;
import csbst.ga.ecj.Chromosome;
import csbst.testing.BranchDistance;

import ec.Fitness;
import ec.util.Parameter;

public abstract class TestingFitness extends Fitness{
	public static TestingFitness underEvaluationFitness=null;
	public static Chromosome underEvaluationChromosome;
	public static int evaluations=0;
	//public static GeneActive underEvaluationGene;
	
	protected double distance;
	
	public void initialize(){
		underEvaluationFitness=this; 
		distance=0;
	}
	
	public void update(){
		underEvaluationFitness=null;
	}

	public void evaluate(Chromosome ch){
		evaluations++;
		//this.
		try {
			underEvaluationChromosome=ch;
			initialize();
			ch.execute();
			update();
			underEvaluationChromosome=null;			
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		}
		
	}
	
	//public abstract void evaluate(Chromosome ch);
	
	public TestingFitness(){
		distance=0;
	}

	public double getDistance(){
		return distance;
	}

	public void setDistance(double dis){
		distance=dis;
	}	
	
	public boolean equals(TestingFitness other){			
		return distance==other.getDistance();
	}
	
	public double getNormalizedBD(){
		return distance/(distance+1);
	}
	
	public  double getNormalizedBDLog(){
    	return 1-1/(1+Math.log(1+distance));//distance/(distance+1);//1-Math.pow(1.001, -1*distance);
    }
	
	
	public  double getNormalizedBDPow(){
    	return 1-Math.pow(1.001, -1*distance);
    }


	@Override
	public int compareTo(Object obj) {
		TestingFitness fit=(TestingFitness) obj;
		if (fitness()>fit.fitness())
			return -1;
		else if (fitness()<fit.fitness())
			return 1;
		else 
			return 0;
	}

	@Override
	public double fitness() {
		return getNormalizedBDLog();
	}

//	@Override
//	public boolean isIdealFitness(){
//		return fitness()==0;
//	}

	@Override
	public boolean betterThan(Fitness _fitness) {
		return compareTo(_fitness)==1;
	}
	
	@Override
	public String toString(){
		String str=new String();
		str=""+fitness();
		return str;
	}

	@Override
	public boolean equivalentTo(Fitness _fitness) {
		// TODO Auto-generated method stub
		return false;
	}
	
	@Override
	public Parameter defaultBase() {
		// TODO Auto-generated method stub
		return null;
	}
}
